// Generated by gencpp from file demo1/node_position.msg
// DO NOT EDIT!


#ifndef DEMO1_MESSAGE_NODE_POSITION_H
#define DEMO1_MESSAGE_NODE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo1
{
template <class ContainerAllocator>
struct node_position_
{
  typedef node_position_<ContainerAllocator> Type;

  node_position_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , theta_x(0.0)
    , theta_y(0.0)
    , theta_z(0.0)  {
    }
  node_position_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , theta_x(0.0)
    , theta_y(0.0)
    , theta_z(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _theta_x_type;
  _theta_x_type theta_x;

   typedef float _theta_y_type;
  _theta_y_type theta_y;

   typedef float _theta_z_type;
  _theta_z_type theta_z;





  typedef boost::shared_ptr< ::demo1::node_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo1::node_position_<ContainerAllocator> const> ConstPtr;

}; // struct node_position_

typedef ::demo1::node_position_<std::allocator<void> > node_position;

typedef boost::shared_ptr< ::demo1::node_position > node_positionPtr;
typedef boost::shared_ptr< ::demo1::node_position const> node_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo1::node_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo1::node_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo1::node_position_<ContainerAllocator1> & lhs, const ::demo1::node_position_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.theta_x == rhs.theta_x &&
    lhs.theta_y == rhs.theta_y &&
    lhs.theta_z == rhs.theta_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo1::node_position_<ContainerAllocator1> & lhs, const ::demo1::node_position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::demo1::node_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo1::node_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo1::node_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo1::node_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo1::node_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo1::node_position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo1::node_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b01742cd81703ae7d171d91df9eaf69e";
  }

  static const char* value(const ::demo1::node_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb01742cd81703ae7ULL;
  static const uint64_t static_value2 = 0xd171d91df9eaf69eULL;
};

template<class ContainerAllocator>
struct DataType< ::demo1::node_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo1/node_position";
  }

  static const char* value(const ::demo1::node_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo1::node_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"float32 theta_x\n"
"float32 theta_y\n"
"float32 theta_z\n"
"\n"
;
  }

  static const char* value(const ::demo1::node_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo1::node_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.theta_x);
      stream.next(m.theta_y);
      stream.next(m.theta_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct node_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo1::node_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo1::node_position_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "theta_x: ";
    Printer<float>::stream(s, indent + "  ", v.theta_x);
    s << indent << "theta_y: ";
    Printer<float>::stream(s, indent + "  ", v.theta_y);
    s << indent << "theta_z: ";
    Printer<float>::stream(s, indent + "  ", v.theta_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO1_MESSAGE_NODE_POSITION_H
