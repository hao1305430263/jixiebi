// Generated by gencpp from file wpm2_tutorials/voc_sign_publisher.msg
// DO NOT EDIT!


#ifndef WPM2_TUTORIALS_MESSAGE_VOC_SIGN_PUBLISHER_H
#define WPM2_TUTORIALS_MESSAGE_VOC_SIGN_PUBLISHER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wpm2_tutorials
{
template <class ContainerAllocator>
struct voc_sign_publisher_
{
  typedef voc_sign_publisher_<ContainerAllocator> Type;

  voc_sign_publisher_()
    : h(0.0)
    , w(0.0)
    , h1(0.0)
    , w1(0.0)
    , sign(0)  {
    }
  voc_sign_publisher_(const ContainerAllocator& _alloc)
    : h(0.0)
    , w(0.0)
    , h1(0.0)
    , w1(0.0)
    , sign(0)  {
  (void)_alloc;
    }



   typedef float _h_type;
  _h_type h;

   typedef float _w_type;
  _w_type w;

   typedef float _h1_type;
  _h1_type h1;

   typedef float _w1_type;
  _w1_type w1;

   typedef int32_t _sign_type;
  _sign_type sign;





  typedef boost::shared_ptr< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> const> ConstPtr;

}; // struct voc_sign_publisher_

typedef ::wpm2_tutorials::voc_sign_publisher_<std::allocator<void> > voc_sign_publisher;

typedef boost::shared_ptr< ::wpm2_tutorials::voc_sign_publisher > voc_sign_publisherPtr;
typedef boost::shared_ptr< ::wpm2_tutorials::voc_sign_publisher const> voc_sign_publisherConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator1> & lhs, const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator2> & rhs)
{
  return lhs.h == rhs.h &&
    lhs.w == rhs.w &&
    lhs.h1 == rhs.h1 &&
    lhs.w1 == rhs.w1 &&
    lhs.sign == rhs.sign;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator1> & lhs, const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wpm2_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >
{
  static const char* value()
  {
    return "124c383f53dd0a8e55cd05d9f136c3e3";
  }

  static const char* value(const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x124c383f53dd0a8eULL;
  static const uint64_t static_value2 = 0x55cd05d9f136c3e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wpm2_tutorials/voc_sign_publisher";
  }

  static const char* value(const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 h\n"
"float32 w\n"
"float32 h1\n"
"float32 w1\n"
"int32 sign\n"
;
  }

  static const char* value(const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.h);
      stream.next(m.w);
      stream.next(m.h1);
      stream.next(m.w1);
      stream.next(m.sign);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct voc_sign_publisher_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wpm2_tutorials::voc_sign_publisher_<ContainerAllocator>& v)
  {
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
    s << indent << "h1: ";
    Printer<float>::stream(s, indent + "  ", v.h1);
    s << indent << "w1: ";
    Printer<float>::stream(s, indent + "  ", v.w1);
    s << indent << "sign: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sign);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WPM2_TUTORIALS_MESSAGE_VOC_SIGN_PUBLISHER_H
