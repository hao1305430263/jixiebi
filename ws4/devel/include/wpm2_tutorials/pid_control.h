// Generated by gencpp from file wpm2_tutorials/pid_control.msg
// DO NOT EDIT!


#ifndef WPM2_TUTORIALS_MESSAGE_PID_CONTROL_H
#define WPM2_TUTORIALS_MESSAGE_PID_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wpm2_tutorials
{
template <class ContainerAllocator>
struct pid_control_
{
  typedef pid_control_<ContainerAllocator> Type;

  pid_control_()
    : speedH(0.0)
    , speedW(0.0)
    , degreeH(0.0)
    , degreeW(0.0)
    , sign(false)  {
    }
  pid_control_(const ContainerAllocator& _alloc)
    : speedH(0.0)
    , speedW(0.0)
    , degreeH(0.0)
    , degreeW(0.0)
    , sign(false)  {
  (void)_alloc;
    }



   typedef float _speedH_type;
  _speedH_type speedH;

   typedef float _speedW_type;
  _speedW_type speedW;

   typedef float _degreeH_type;
  _degreeH_type degreeH;

   typedef float _degreeW_type;
  _degreeW_type degreeW;

   typedef uint8_t _sign_type;
  _sign_type sign;





  typedef boost::shared_ptr< ::wpm2_tutorials::pid_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wpm2_tutorials::pid_control_<ContainerAllocator> const> ConstPtr;

}; // struct pid_control_

typedef ::wpm2_tutorials::pid_control_<std::allocator<void> > pid_control;

typedef boost::shared_ptr< ::wpm2_tutorials::pid_control > pid_controlPtr;
typedef boost::shared_ptr< ::wpm2_tutorials::pid_control const> pid_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wpm2_tutorials::pid_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wpm2_tutorials::pid_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wpm2_tutorials::pid_control_<ContainerAllocator1> & lhs, const ::wpm2_tutorials::pid_control_<ContainerAllocator2> & rhs)
{
  return lhs.speedH == rhs.speedH &&
    lhs.speedW == rhs.speedW &&
    lhs.degreeH == rhs.degreeH &&
    lhs.degreeW == rhs.degreeW &&
    lhs.sign == rhs.sign;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wpm2_tutorials::pid_control_<ContainerAllocator1> & lhs, const ::wpm2_tutorials::pid_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wpm2_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::wpm2_tutorials::pid_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wpm2_tutorials::pid_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpm2_tutorials::pid_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpm2_tutorials::pid_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpm2_tutorials::pid_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpm2_tutorials::pid_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wpm2_tutorials::pid_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75b9d16766039ffd6652003c252e1822";
  }

  static const char* value(const ::wpm2_tutorials::pid_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75b9d16766039ffdULL;
  static const uint64_t static_value2 = 0x6652003c252e1822ULL;
};

template<class ContainerAllocator>
struct DataType< ::wpm2_tutorials::pid_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wpm2_tutorials/pid_control";
  }

  static const char* value(const ::wpm2_tutorials::pid_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wpm2_tutorials::pid_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speedH\n"
"float32 speedW\n"
"float32 degreeH\n"
"float32 degreeW\n"
"bool sign\n"
;
  }

  static const char* value(const ::wpm2_tutorials::pid_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wpm2_tutorials::pid_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speedH);
      stream.next(m.speedW);
      stream.next(m.degreeH);
      stream.next(m.degreeW);
      stream.next(m.sign);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pid_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wpm2_tutorials::pid_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wpm2_tutorials::pid_control_<ContainerAllocator>& v)
  {
    s << indent << "speedH: ";
    Printer<float>::stream(s, indent + "  ", v.speedH);
    s << indent << "speedW: ";
    Printer<float>::stream(s, indent + "  ", v.speedW);
    s << indent << "degreeH: ";
    Printer<float>::stream(s, indent + "  ", v.degreeH);
    s << indent << "degreeW: ";
    Printer<float>::stream(s, indent + "  ", v.degreeW);
    s << indent << "sign: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sign);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WPM2_TUTORIALS_MESSAGE_PID_CONTROL_H
