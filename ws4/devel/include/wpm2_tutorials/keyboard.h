// Generated by gencpp from file wpm2_tutorials/keyboard.msg
// DO NOT EDIT!


#ifndef WPM2_TUTORIALS_MESSAGE_KEYBOARD_H
#define WPM2_TUTORIALS_MESSAGE_KEYBOARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wpm2_tutorials
{
template <class ContainerAllocator>
struct keyboard_
{
  typedef keyboard_<ContainerAllocator> Type;

  keyboard_()
    : input1(0)
    , input2(0)  {
    }
  keyboard_(const ContainerAllocator& _alloc)
    : input1(0)
    , input2(0)  {
  (void)_alloc;
    }



   typedef int32_t _input1_type;
  _input1_type input1;

   typedef int32_t _input2_type;
  _input2_type input2;





  typedef boost::shared_ptr< ::wpm2_tutorials::keyboard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wpm2_tutorials::keyboard_<ContainerAllocator> const> ConstPtr;

}; // struct keyboard_

typedef ::wpm2_tutorials::keyboard_<std::allocator<void> > keyboard;

typedef boost::shared_ptr< ::wpm2_tutorials::keyboard > keyboardPtr;
typedef boost::shared_ptr< ::wpm2_tutorials::keyboard const> keyboardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wpm2_tutorials::keyboard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wpm2_tutorials::keyboard_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wpm2_tutorials::keyboard_<ContainerAllocator1> & lhs, const ::wpm2_tutorials::keyboard_<ContainerAllocator2> & rhs)
{
  return lhs.input1 == rhs.input1 &&
    lhs.input2 == rhs.input2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wpm2_tutorials::keyboard_<ContainerAllocator1> & lhs, const ::wpm2_tutorials::keyboard_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wpm2_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::wpm2_tutorials::keyboard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wpm2_tutorials::keyboard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpm2_tutorials::keyboard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wpm2_tutorials::keyboard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpm2_tutorials::keyboard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wpm2_tutorials::keyboard_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wpm2_tutorials::keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edeabc49039f3caeacd6317ca5d6e180";
  }

  static const char* value(const ::wpm2_tutorials::keyboard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedeabc49039f3caeULL;
  static const uint64_t static_value2 = 0xacd6317ca5d6e180ULL;
};

template<class ContainerAllocator>
struct DataType< ::wpm2_tutorials::keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wpm2_tutorials/keyboard";
  }

  static const char* value(const ::wpm2_tutorials::keyboard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wpm2_tutorials::keyboard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 input1\n"
"int32 input2\n"
;
  }

  static const char* value(const ::wpm2_tutorials::keyboard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wpm2_tutorials::keyboard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input1);
      stream.next(m.input2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct keyboard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wpm2_tutorials::keyboard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wpm2_tutorials::keyboard_<ContainerAllocator>& v)
  {
    s << indent << "input1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.input1);
    s << indent << "input2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.input2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WPM2_TUTORIALS_MESSAGE_KEYBOARD_H
