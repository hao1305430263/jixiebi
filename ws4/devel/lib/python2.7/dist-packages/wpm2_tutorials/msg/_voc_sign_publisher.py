# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from wpm2_tutorials/voc_sign_publisher.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class voc_sign_publisher(genpy.Message):
  _md5sum = "124c383f53dd0a8e55cd05d9f136c3e3"
  _type = "wpm2_tutorials/voc_sign_publisher"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 h
float32 w
float32 h1
float32 w1
int32 sign
"""
  __slots__ = ['h','w','h1','w1','sign']
  _slot_types = ['float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       h,w,h1,w1,sign

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(voc_sign_publisher, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.h is None:
        self.h = 0.
      if self.w is None:
        self.w = 0.
      if self.h1 is None:
        self.h1 = 0.
      if self.w1 is None:
        self.w1 = 0.
      if self.sign is None:
        self.sign = 0
    else:
      self.h = 0.
      self.w = 0.
      self.h1 = 0.
      self.w1 = 0.
      self.sign = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4fi().pack(_x.h, _x.w, _x.h1, _x.w1, _x.sign))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.h, _x.w, _x.h1, _x.w1, _x.sign,) = _get_struct_4fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4fi().pack(_x.h, _x.w, _x.h1, _x.w1, _x.sign))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.h, _x.w, _x.h1, _x.w1, _x.sign,) = _get_struct_4fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fi = None
def _get_struct_4fi():
    global _struct_4fi
    if _struct_4fi is None:
        _struct_4fi = struct.Struct("<4fi")
    return _struct_4fi
